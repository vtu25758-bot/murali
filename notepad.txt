
import time
import smbus2
import random  # Used to simulate FSR readings
from gpiozero import Button

# Constants
INTERVAL_MS = 20
FSR_SIMULATED = True  # Set to False if using an actual ADC
TIP_SWITCH_PIN = 13

# MPU6050 Registers
MPU6050_ADDR = 0x68
PWR_MGMT_1 = 0x6B
ACCEL_XOUT_H = 0x3B
GYRO_XOUT_H = 0x43

# Setup I2C
bus = smbus2.SMBus(1)
bus.write_byte_data(MPU6050_ADDR, PWR_MGMT_1, 0)

# Setup GPIO
tip_switch = Button(TIP_SWITCH_PIN, pull_up=True)

def read_word(reg):
    high = bus.read_byte_data(MPU6050_ADDR, reg)
    low = bus.read_byte_data(MPU6050_ADDR, reg + 1)
    val = (high << 8) + low
    return val - 65536 if val > 32767 else val

def read_mpu6050():
    ax = read_word(ACCEL_XOUT_H) / 16384.0
    ay = read_word(ACCEL_XOUT_H + 2) / 16384.0
    az = read_word(ACCEL_XOUT_H + 4) / 16384.0
    gx = read_word(GYRO_XOUT_H) / 131.0
    gy = read_word(GYRO_XOUT_H + 2) / 131.0
    gz = read_word(GYRO_XOUT_H + 4) / 131.0
    return ax, ay, az, gx, gy, gz

print('{"info":"pen ready"}')

last_time = time.time()

while True:
    now = time.time()
    if (now - last_time) * 1000 < INTERVAL_MS:
        continue
    last_time = now

    ax, ay, az, gx, gy, gz = read_mpu6050()

    if FSR_SIMULATED:
        fsr_voltage = round(random.uniform(0.5, 3.0), 3)
    else:
        fsr_voltage = read_adc_voltage_somehow()

    tip = int(not tip_switch.is_pressed)

    print(f'{{"t":{int(now*1000)},"ax":{ax:.4f},"ay":{ay:.4f},"az":{az:.4f},'
          f'"gx":{gx:.4f},"gy":{gy:.4f},"gz":{gz:.4f},"fsr":{fsr_voltage:.3f},"tip":{tip}}}')

 
